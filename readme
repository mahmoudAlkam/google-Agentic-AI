
## ðŸ§© 1. Agentenentwicklung (angepasst fÃ¼r PDF-only Use Case)

### ðŸ”¹ Empfangsagent â€“ Intent Detection via Dialogflow CX

**Ziel:**  
Erkennung des Kundenanliegens beim Erstkontakt Ã¼ber CES (Chat oder Voice).

**Umsetzungsschritte:**
1. Erstelle einen Agent in **Dialogflow CX**.
2. Definiere Intents:
   - Produktfrage
   - Garantieanfrage
   - Fehlercode
   - Unklarer Intent
3. Konfiguriere Entity-Erkennung:
   - `@Produkttyp`
   - `@Seriennummer`
   - `@Fehlercode`
4. Route basierend auf Intent zu den jeweiligen Spezialagenten.

---

### ðŸ”¹ Informationsagent â€“ Zugriff auf PDF via RAG

**Ziel:**  
Beantwortung von Produkt- und Garantiefragen durch KI mit PDF als Datenquelle.

**Umsetzungsschritte:**
1. Verwende einen **PDF-Parser** (z.â€¯B. LangChain + PyMuPDF oder PDFMiner).
2. Implementiere **Retrieval-Augmented Generation (RAG)**:
   - Extrahiere relevante Abschnitte aus PDF basierend auf Anfrage.
   - Ãœbergib die extrahierten Inhalte an ein generatives KI-Modell (z.â€¯B. Vertex AI).
3. Generiere Antwort inkl. Quellenverweis (z.â€¯B. Seitenzahl).
4. Berechne Confidence Score (siehe unten).
5. Bei Unsicherheit â†’ `${FLOW:RÃ¼ckfragen}` â†’ ggf. `${FLOW:Eskalation}`

---

### ðŸ”¹ Analyseagent â€“ Fehlercode-Analyse mit Regelwerk

**Ziel:**  
Technische Analyse von Fehlercodes auf Basis von PDF-Inhalten.

**Umsetzungsschritte:**
1. Definiere Mapping-Regeln: z.â€¯B. `E02` â†’ â€žWasserzulauf prÃ¼fenâ€œ.
2. Suche im PDF nach Fehlercode-Abschnitten.
3. Extrahiere LÃ¶sungsvorschlÃ¤ge.
4. Generiere Antwort mit KI.
5. Confidence Score prÃ¼fen â†’ ggf. RÃ¼ckfrage oder Eskalation.

---

### ðŸ”¹ Eskalationsagent â€“ Schwellenwertlogik + Jira-Ticket-Erstellung

**Ziel:**  
Ãœbergabe komplexer FÃ¤lle an menschliche Agenten.

**Umsetzungsschritte:**
1. Definiere Schwellenwert fÃ¼r Confidence Score (z.â€¯B. `< 0.6`).
2. Bei Trigger â†’ erst `${FLOW:RÃ¼ckfragen}`, dann `${FLOW:Eskalation}`.
3. Erstelle Jira-Ticket via API mit:
   - Chatverlauf
   - Anfrageparameter
   - PDF-AuszÃ¼ge
   - Confidence Score

---

### ðŸ”¹ Assistenzagent â€“ VorschlÃ¤ge & Suche fÃ¼r menschliche Agenten

**Ziel:**  
UnterstÃ¼tzung menschlicher Agenten mit PDF-Suche und VorschlÃ¤gen.

**Umsetzungsschritte:**
1. Implementiere semantische Suche in PDF.
2. Generiere VorschlÃ¤ge basierend auf Ã¤hnlichen FÃ¤llen.
3. ErmÃ¶gliche manuelle Ticket-Erstellung bei fehlenden Informationen.

---

### ðŸ”¹ Lernagent â€“ Feedbackauswertung (ohne Confluence)

**Ziel:**  
Systemverbesserung durch Feedbackanalyse.

**Umsetzungsschritte:**
1. Analysiere Eskalationen und negatives Feedback.
2. Markiere PDF-Stellen, die unklar oder unvollstÃ¤ndig sind.
3. Erstelle VorschlÃ¤ge zur PDF-ErgÃ¤nzung (z.â€¯B. neue Version).
4. Ãœbergabe an Content-Team zur PDF-Pflege.

---

## ðŸ§© 2. Flows & Routing (angepasst)

### ðŸ”¹ Flows in CES definieren

| Flow            | Zweck                                      |
|-----------------|---------------------------------------------|
| `${FLOW:BegrÃ¼ÃŸung}` | BegrÃ¼ÃŸung, Intent-Erkennung starten         |
| `${FLOW:RÃ¼ckfragen}` | KlÃ¤rung bei Unsicherheit oder fehlenden Parametern |
| `${FLOW:Eskalation}` | Ãœbergabe an menschlichen Agenten via Jira |
| Monitoring       | Logging fÃ¼r Lernagent und Reporting        |

---

### ðŸ”¹ Routing-Logik gemÃ¤ÃŸ Intent & Confidence Score

| Intent              | Agent              | Bei Unsicherheit â†’ RÃ¼ckfragen | Bei Scheitern â†’ Eskalation |
|---------------------|--------------------|-------------------------------|-----------------------------|
| Produktfrage        | Informationsagent  | âœ…                             | âœ…                           |
| Garantieanfrage     | Informationsagent  | âœ…                             | âœ…                           |
| Fehlercode          | Analyseagent       | âœ…                             | âœ…                           |
| Unklarer Intent     | Empfangsagent      | â€”                              | â€”                            |

---

## ðŸ§  Confidence Score berechnen (PDF-only)

**Empfohlene Methode:**  
Verwende semantische Ã„hnlichkeit zwischen Anfrage und extrahiertem PDF-Abschnitt.

```python
from sklearn.metrics.pairwise import cosine_similarity

score = cosine_similarity([frage_embedding], [pdf_abschnitt_embedding])[0][0]
```

- `< 0.6` â†’ RÃ¼ckfrage
- `< 0.4` nach RÃ¼ckfrage â†’ Eskalation

---

Wenn du mÃ¶chtest, kann ich dir ein Beispielskript fÃ¼r die PDF-Suche, Confidence Score Berechnung oder Jira-Integration erstellen. Sag einfach Bescheid!
